#include "FractalFrame.h"

#include "menuicons.h"

///Event enumeration
enum{
    ID_PRINTSCREEN    = 1,
    ID_HDPRINTSCREEN  = 2
};
///Constructor
FractalFrame::FractalFrame():wxFrame(nullptr, wxID_ANY, "Mandelbrot set plotter"){
    /**Menu*/{
        wxMenu* menuFile      = new wxMenu;
        wxMenuItem* menuItem_Printscreen   = new wxMenuItem(menuFile, ID_PRINTSCREEN  , wxT("Save printscreen\tCtrl+S"));
                    menuItem_Printscreen  ->SetBitmap(FILESAVEAS);
        wxMenuItem* menuItem_HDPrintscreen = new wxMenuItem(menuFile, ID_HDPRINTSCREEN, wxT("Save HD printscreen"));
                    menuItem_HDPrintscreen->SetBitmap(FILESAVEAS);
        menuFile->Append(menuItem_Printscreen  );
        menuFile->Append(menuItem_HDPrintscreen);

        wxMenuBar* menuBar = new wxMenuBar;
        menuBar->Append(menuFile, "File");
        this->SetMenuBar(menuBar);
    }
    /**Panels*/{
        fpanel = new FractalPanel(this, wxSize(1150, 500));
        ipanel = new InfoPanel   (this);
    }
    /**Sizers*/{
        wxBoxSizer* sizer = new wxBoxSizer(wxVERTICAL);
        sizer->Add(fpanel, 1, wxALL | wxEXPAND, 5);
        sizer->Add(ipanel, 0, wxLEFT | wxBOTTOM | wxRIGHT | wxEXPAND, 7);
        sizer->SetSizeHints(this);
        this->SetSizer(sizer);
    }
    /**Create fractal*/{
        f = new mb({0.0L,0.0L}, 1.0L, fpanel->GetSize(), FractalHeight, true);
    }
    /**Create fractal thread*/{
        fthread = new std::thread(Run_fthread, this);
    }
}

typedef std::chrono::high_resolution_clock hrclock;
void FractalFrame::Run_fthread(){
    const mb::IterationT addIt = 50;
    while(true){
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
        ///Update the fractal
        auto t1 = hrclock::now();
        f->UpdateMath(0, fpanel->GetSize().x*fpanel->GetSize().y, addIt);
        auto t2 = hrclock::now();
        ///Update the screen
        wxClientDC dc(fpanel);
        dc.DrawBitmap(f->GetBmp(), 0, 0, true);
        ///Update the InfoPanel
        auto dt = std::chrono::duration<long double>(t2-t1);

        ipanel->Update({0.0L,0.0L}, f->GetZoom(), f->GetNumIt(), dt.count()/(long double)addIt, 0.0L);
    }
}

/*
void FractalFrame::OnPrintscreen  (wxCommandEvent& event) {fractalPanel_->OnPrintscreen  ();}
void FractalFrame::OnHDPrintscreen(wxCommandEvent& event) {fractalPanel_->OnHDPrintscreen();}
*/
///MACROS - redirect events to functions
wxBEGIN_EVENT_TABLE(FractalFrame, wxFrame)
/*
    EVT_MENU(ID_PRINTSCREEN  , FractalFrame::OnPrintscreen  )
    EVT_MENU(ID_HDPRINTSCREEN, FractalFrame::OnHDPrintscreen)
*/
wxEND_EVENT_TABLE()
